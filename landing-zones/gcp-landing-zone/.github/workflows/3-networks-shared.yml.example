name: '3-networks - shared'

on:
  pull_request:
    branches:
      - INSERT_MAIN_BRANCH
    paths:
      - 3-networks/envs/shared/**
  workflow_call:

env:
  PROJECT_ID: PRJ_B_CICD_XXXX
  SECRET_ID: INSERT_SECRET_KEY
  MIN_TF_VERSION: 1.0.9
  MIN_GOOG_VERSION: 3.89.0
  BUCKET: INSERT_BUCKET_NAME
  URL_ORG: https://api.github.com/repos/GITHUB_OWNER/REPO_NAME/actions/workflows/1-org-main.yml/runs
  URL_BS: https://api.github.com/repos/GITHUB_OWNER/REPO_NAME/actions/workflows/0-bootstrap-main.yml/runs
  GITHUB_TOKEN: ${{ github.token }}
  GAR_REGION: INSERT_GAR_REGION
jobs:
  previous-stage-check:
    name: "Check Stage Bootstrap & Org-Development"
    runs-on: INSERT_RUNNER_LABEL
    outputs:
      success: ${{ steps.stagecheck.outputs.success }}
      failure: ${{ steps.stagecheck.outputs.failure }}
    steps:
    - name: "Check Stage Bootstrap & Org-Development"
      id: stagecheck
      run: |
        STATUS_ORG=`curl -s \
            -H"authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
            -X GET ${{ env.URL_ORG }} | jq -r '.workflow_runs[0].status'`
        CONCLUSION_ORG=`curl -s \
            -H"authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
            -X GET ${{ env.URL_ORG }} | jq -r '.workflow_runs[0].conclusion'`
        STATUS_BS=`curl -s \
            -H"authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
            -X GET ${{ env.URL_BS }} | jq -r '.workflow_runs[0].status'`
        CONCLUSION_BS=`curl -s \
            -H"authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
            -X GET ${{ env.URL_BS }} | jq -r '.workflow_runs[0].conclusion'`
        LAST_STAGE=true
        if [ "$STATUS_ORG" == completed ] && [ "$CONCLUSION_ORG" == success ] && [ "$STATUS_BS" == completed ] && [ "$CONCLUSION_BS" == success ]; then
                echo "::set-output name=success::$LAST_STAGE"
        else
               LAST_STAGE=false
               echo "::set-output name=failure::$LAST_STAGE"
        fi
  terraform:
    needs: [terraform-versioncheck,tflint,previous-stage-check]
    name: "terraform plan and IAC scan"
    if: contains(needs.previous-stage-check.outputs.success, 'true')
    runs-on: INSERT_RUNNER_LABEL
    defaults:
      run:
        working-directory: 3-networks/envs/shared/
    permissions:
      pull-requests: 'write'
      contents: read
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: '338.0.0'
      - name: configure Regula
        run: |
          wget -q https://github.com/fugue/regula/releases/download/v2.6.1/regula_2.6.1_Linux_x86_64.tar.gz
          tar -xf regula_2.6.1_Linux_x86_64.tar.gz
          mv regula /usr/local/bin
      - name: Compliance check
        run: |
          date -u +%Y%m%d-T%H%M%S > TAG
          regula run  . | tee ./compliance-3-net-shared-$(cat TAG).json

      - name: Upload compliance report
        run: |
          jq .summary.rule_results.FAIL ./compliance-3-net-shared-$(cat TAG).json > STATUS
          if [ $(cat STATUS) == 0 ]; then
                echo "-----------------------------------------------------------"
                echo "The Terraform code is compliant with Compliance standards"
                echo "-----------------------------------------------------------"
                gsutil cp ./compliance-3-net-shared-$(cat TAG).json gs://${{ env.BUCKET }}/tf-validator/compliance-3-net-shared-$(cat TAG).json
          else
                echo "-----------------------------------------------------------"
                echo "Please check terraform code fix the errors listed above."
                echo "-----------------------------------------------------------"
                gsutil cp ./compliance-3-net-shared-$(cat TAG).json gs://${{ env.BUCKET }}/tf-validator/compliance-3-net-shared-$(cat TAG).json
                exit 1
          fi
      - name: Trigger build
        run: |
          cd ${{ github.workspace}}/build
          gcloud builds submit --config=github-ssh-cloudbuild-plan.yml \
            --project=${{ env.PROJECT_ID }} \
            --substitutions=_SECRET_ID=${{ env.SECRET_ID }},_GIT_HEAD_BRANCH=${{ github.event.pull_request.head.ref }},_GIT_LZ_REPO="${{ github.repository }}.git",_GIT_WORK_DIR="${GITHUB_REPOSITORY##*/}/3-networks/envs/shared",_GAR_REGION=${{ env.GAR_REGION}}
  terraform-versioncheck:
    name: 'terraform version check'
    runs-on: INSERT_RUNNER_LABEL
    defaults:
      run:
        working-directory: 3-networks/envs/shared/
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0.9
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init -reconfigure

    # Check Terraform provider version
    - name: Terraform Version Check
      id: tf-versioncheck
      continue-on-error: true
      run: |
        export NEWVERSION="$(terraform version | awk '/^Terraform /{print $NF}' | sed 's,[a-zA-Z],,g')"
        export EXPECTEDVERSION="${{env.MIN_TF_VERSION}}"
        function version_le() { test "$(echo "$NEWVERSION $EXPECTEDVERSION" | tr " " "\n" | sort -V | head -n 1)" == "$1"; }
        function version_lt() { test "$(echo "$NEWVERSION $EXPECTEDVERSION" | tr " " "\n" | sort -rV | head -n 1)" != "$1"; }

        if version_lt "$NEWVERSION" "$EXPECTEDVERSION"; then
          echo "::set-output name=comment::Terraform version check failed"
          exit 1
        fi

    - name: Google Provider version check
      id: goog-versioncheck
      continue-on-error: true
      run: |
        export NEWVERSION="$(terraform version | awk '/^+.*google /{print $NF}' | sed 's,[a-zA-Z],,g')"
        export EXPECTEDVERSION="${{env.MIN_GOOG_VERSION}}"
        function version_le() { test "$(echo "$NEWVERSION $EXPECTEDVERSION" | tr " " "\n" | sort -V | head -n 1)" == "$1"; }
        function version_lt() { test "$(echo "$NEWVERSION $EXPECTEDVERSION" | tr " " "\n" | sort -rV | head -n 1)" != "$1"; }

        if version_lt "$NEWVERSION" "$EXPECTEDVERSION"; then
          echo "::set-output name=comment::Google Provider version check failed"
          exit 1
        fi

    - name: Google Beta Provider version check
      id: goog-beta-versioncheck
      continue-on-error: true
      run: |
        export NEWVERSION="$(terraform version | awk '/^+.*google-beta /{print $NF}' | sed 's,[a-zA-Z],,g')"
        export EXPECTEDVERSION="${{env.MIN_GOOG_VERSION}}"
        function version_le() { test "$(echo "$NEWVERSION $EXPECTEDVERSION" | tr " " "\n" | sort -V | head -n 1)" == "$1"; }
        function version_lt() { test "$(echo "$NEWVERSION $EXPECTEDVERSION" | tr " " "\n" | sort -rV | head -n 1)" != "$1"; }

        if version_lt "$NEWVERSION" "$EXPECTEDVERSION"; then
          echo "::set-output name=comment::Google Beta Provider version check failed"
          exit 1
        fi

    - name: Comment PR for failed terraform check
      id: commentpr
      if: steps.tf-versioncheck.outcome != 'success'
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Terraform version checked failed. Please use v1.0.9'
          })

    - name: Comment PR for failed Google provider check
      id: commentpr2
      if: steps.goog-versioncheck.outcome != 'success'
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Google Provider version checked failed. Please use v3.89.0'
          })

    - name: Comment PR for failed Google Beta Provider check
      id: commentpr3
      if: steps.goog-beta-versioncheck.outcome != 'success'
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Google Beta Provider version check failed. Please use v3.89.0'
          })

    - name: Fail workflow
      id: failworkflow
      if: steps.tf-versioncheck.outcome != 'success' || steps.goog-versioncheck.outcome != 'success' || steps.goog-beta-versioncheck.outcome != 'success'
      run: exit 1
  tflint:
    runs-on: INSERT_RUNNER_LABEL
    defaults:
      run:
        working-directory: 3-networks/
    steps:
    - uses: actions/checkout@v2
      id: tflint
      name: Checkout source code
    - uses: terraform-linters/setup-tflint@v1
      name: Setup TFLint
      with:
        tflint_version: v0.29.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

  last-stage-failed:
    needs: [previous-stage-check]
    runs-on: INSERT_RUNNER_LABEL
    if: contains(needs.previous-stage-check.outputs.failure, 'false' )
    steps:
    - name: Comment PR for failed previous stage
      id: commentpr
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '3-networks-shared plan stage failed. Please run 0-bootstrap , 1-org & 2-env before running 3-networks-shared.'
          })
