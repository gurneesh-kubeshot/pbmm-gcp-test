steps:
  # Clone the repository
  - name: gcr.io/cloud-builders/git
    args: ['clone', '--branch', 'main', 'https://github.com/gurneesh-kubeshot/pbmm-gcp-test.git']
    id: 'check-out-source'

  # Get the service account key from Secret Manager
  - name: gcr.io/cloud-builders/gcloud
    id: 'get-sa-key'
    entrypoint: 'bash'
    args:
    - -c
    - |
      echo "$$SECRET" > /workspace/sa-key.json
    secretEnv: ['SECRET']

  # Install dependencies and run deployment
  - id: 'deploy'
    name: gcr.io/cloud-builders/gcloud
    entrypoint: 'bash'
    args:
    - -c
    - |
      cd pbmm-gcp-test
      
      # Add Google Cloud SDK repository
      echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      
      # Install system dependencies
      apt-get update && apt-get install -y \
        wget \
        unzip \
        python3 \
        python3-pip \
        dos2unix \
        jq \
        apt-transport-https \
        ca-certificates \
        gnupg \
        google-cloud-sdk
      
      # Install Terraform
      cd /tmp
      wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
      unzip terraform_1.6.0_linux_amd64.zip
      mv terraform /usr/local/bin/
      chmod +x /usr/local/bin/terraform
      cd -
      
      # Install Python dependencies
      python3 -m pip install --upgrade pip
      python3 -m pip install pyyaml google-cloud-devtools-cloudbuild rich jsonschema
      
      # Set file permissions
      find . -type f -name "*.sh" -exec chmod +x {} \;
      find . -type f -name "*.sh" -exec dos2unix {} \;
      
      # Set environment variables
      export REGION=${_REGION}
      export ORG_ID=${_ORG_ID}
      export ROOT_FOLDER_ID=${_ROOT_FOLDER_ID}
      export BILLING_ID=${_BILLING_ID}
      
      echo "Environment variables set:"
      echo "REGION: ${_REGION}"
      echo "ORG_ID: ${_ORG_ID}"
      echo "ROOT_FOLDER_ID: ${_ROOT_FOLDER_ID}"
      echo "BILLING_ID: ${_BILLING_ID}"
      
      # Create necessary directories
      mkdir -p landing-zones/gcp-landing-zone/0-bootstrap
      
      # Create prep.sh in bootstrap directory
      cat > landing-zones/gcp-landing-zone/0-bootstrap/prep.sh << 'EOF'
#!/bin/bash
set -e

# Initialize Terraform backend
cat > backend.tf << EOT
terraform {
  backend "local" {}
}
EOT

chmod +x prep.sh
EOF
      
      chmod +x landing-zones/gcp-landing-zone/0-bootstrap/prep.sh
      
      # Run deployment script
      cd landing-zones/gcp-landing-zone
      chmod +x automation-scripts/deploy.sh
      ./automation-scripts/deploy.sh \
        -k /workspace/sa-key.json \
        -p ${_PROJECT_ID} \
        -m plan

logsBucket: 'gs://build-logs-${_PROJECT_ID}/cloudbuild-logs'

availableSecrets:
  secretManager:
  - versionName: projects/${_PROJECT_ID}/secrets/${_SA_KEY_SECRET}/versions/latest
    env: 'SECRET'

substitutions:
  _PROJECT_ID: '' # Project ID where secrets are stored
  _SA_KEY_SECRET: 'terraform-sa-key' # Name of the secret containing the service account key
  _REGION: ''
  _ORG_ID: ''
  _ROOT_FOLDER_ID: ''
  _BILLING_ID: '' 